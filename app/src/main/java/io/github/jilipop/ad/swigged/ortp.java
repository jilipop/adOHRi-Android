/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package io.github.jilipop.ad.swigged;

import io.github.jilipop.ad.swigged.swigtypes.*;

public class ortp {
  public static void ortp_init() {
    ortpJNI.ortp_init();
  }

  public static void ortp_scheduler_init() {
    ortpJNI.ortp_scheduler_init();
  }

  public static void ortp_exit() {
    ortpJNI.ortp_exit();
  }

  public static void ortp_global_stats_display() {
    ortpJNI.ortp_global_stats_display();
  }

  public static SWIGTYPE_p_RtpSession rtp_session_new(int mode) {
    long cPtr = ortpJNI.rtp_session_new(mode);
    return (cPtr == 0) ? null : new SWIGTYPE_p_RtpSession(cPtr, false);
  }

  public static void rtp_session_set_scheduling_mode(SWIGTYPE_p_RtpSession session, int yesno) {
    ortpJNI.rtp_session_set_scheduling_mode(SWIGTYPE_p_RtpSession.getCPtr(session), yesno);
  }

  public static void rtp_session_set_blocking_mode(SWIGTYPE_p_RtpSession session, int yesno) {
    ortpJNI.rtp_session_set_blocking_mode(SWIGTYPE_p_RtpSession.getCPtr(session), yesno);
  }

  public static int rtp_session_signal_connect(SWIGTYPE_p_RtpSession session, String signal_name, SWIGTYPE_p_RtpCallback cb, SWIGTYPE_p_void user_data) {
    return ortpJNI.rtp_session_signal_connect(SWIGTYPE_p_RtpSession.getCPtr(session), signal_name, SWIGTYPE_p_RtpCallback.getCPtr(cb), SWIGTYPE_p_void.getCPtr(user_data));
  }

  public static void rtp_session_set_jitter_compensation(SWIGTYPE_p_RtpSession session, int milisec) {
    ortpJNI.rtp_session_set_jitter_compensation(SWIGTYPE_p_RtpSession.getCPtr(session), milisec);
  }

  public static void rtp_session_enable_adaptive_jitter_compensation(SWIGTYPE_p_RtpSession session, SWIGTYPE_p_bool_t val) {
    ortpJNI.rtp_session_enable_adaptive_jitter_compensation(SWIGTYPE_p_RtpSession.getCPtr(session), SWIGTYPE_p_bool_t.getCPtr(val));
  }

  public static void rtp_session_set_time_jump_limit(SWIGTYPE_p_RtpSession session, int milliseconds) {
    ortpJNI.rtp_session_set_time_jump_limit(SWIGTYPE_p_RtpSession.getCPtr(session), milliseconds);
  }

  public static int rtp_session_set_local_addr(SWIGTYPE_p_RtpSession session, String addr, int rtp_port, int rtcp_port) {
    return ortpJNI.rtp_session_set_local_addr(SWIGTYPE_p_RtpSession.getCPtr(session), addr, rtp_port, rtcp_port);
  }

  public static int rtp_session_set_payload_type(SWIGTYPE_p_RtpSession session, int pt) {
    return ortpJNI.rtp_session_set_payload_type(SWIGTYPE_p_RtpSession.getCPtr(session), pt);
  }

  public static void rtp_session_set_connected_mode(SWIGTYPE_p_RtpSession session, SWIGTYPE_p_bool_t yesno) {
    ortpJNI.rtp_session_set_connected_mode(SWIGTYPE_p_RtpSession.getCPtr(session), SWIGTYPE_p_bool_t.getCPtr(yesno));
  }

  public static void rtp_session_enable_rtcp(SWIGTYPE_p_RtpSession session, SWIGTYPE_p_bool_t yesno) {
    ortpJNI.rtp_session_enable_rtcp(SWIGTYPE_p_RtpSession.getCPtr(session), SWIGTYPE_p_bool_t.getCPtr(yesno));
  }

  public static int rtp_session_recv_with_ts(SWIGTYPE_p_RtpSession session, SWIGTYPE_p_uint8_t buffer, int len, SWIGTYPE_p_uint32_t ts, SWIGTYPE_p_int have_more) {
    return ortpJNI.rtp_session_recv_with_ts(SWIGTYPE_p_RtpSession.getCPtr(session), SWIGTYPE_p_uint8_t.getCPtr(buffer), len, SWIGTYPE_p_uint32_t.getCPtr(ts), SWIGTYPE_p_int.getCPtr(have_more));
  }

  public static void rtp_session_resync(SWIGTYPE_p_RtpSession session) {
    ortpJNI.rtp_session_resync(SWIGTYPE_p_RtpSession.getCPtr(session));
  }

  public static void rtp_session_destroy(SWIGTYPE_p_RtpSession session) {
    ortpJNI.rtp_session_destroy(SWIGTYPE_p_RtpSession.getCPtr(session));
  }

}
